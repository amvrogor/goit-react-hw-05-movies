{"version":3,"file":"static/js/387.71dc79fa.chunk.js","mappings":"qPAEaA,EAAOC,EAAAA,GAAAA,GAAH,wFAMJC,EAAWD,EAAAA,GAAAA,GAAH,sBAERE,EAAcF,EAAAA,GAAAA,GAAH,4CAIXG,EAAaH,EAAAA,GAAAA,EAAH,4C,SCmBvB,EA5BgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OAVAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcN,GACXO,MAAK,SAAAC,GACJJ,EAAWI,EAAKC,QACjB,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,GACJ,GAAE,CAACX,KAGF,SAACL,EAAD,UACsB,IAAnBQ,EAAQW,OACLX,EAAQY,KAAI,SAAAC,GAAM,OAChB,UAACnB,EAAD,YACE,UAACC,EAAD,sBAAsBkB,EAAOC,WAC7B,UAAClB,EAAD,WAAaiB,EAAOE,QAApB,SAFaF,EAAOG,GADN,IAMlB,4CAGT,C,8OC7BYC,EAAW,gCACXC,EAAiB,iCACjBC,EAAa,mCAEnB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,yGAA8BC,EAA9B,+BAAqC,EAArC,SACkBC,EAAAA,EAAAA,IAAA,UAClBL,EADkB,sCACoBE,EADpB,iBACuCE,IAFzD,cACCE,EADD,yBAIEA,EAASlB,MAJX,mEAOA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,4FAAwCJ,EAAxC,+BAA+C,EAA/C,SACkBC,EAAAA,EAAAA,IAAA,UAClBL,EADkB,gCACcE,EADd,gCACgDE,EADhD,sCACkFI,IAFpG,cACCF,EADD,yBAIEA,EAASlB,MAJX,mEAOA,SAAeqB,EAAtB,+CAAO,OAAP,oBAAO,WAA6BV,GAA7B,uFACkBM,EAAAA,EAAAA,IAAA,UAClBL,EADkB,iBACDD,EADC,oBACaG,EADb,oBADlB,cACCI,EADD,yBAIEA,EAASlB,MAJX,kEAOA,SAAesB,IAAtB,4CAAO,OAAP,oBAAO,oGACkBL,EAAAA,EAAAA,IAAA,UAClBL,EADkB,oCACkBE,EADlB,oBADlB,cACCI,EADD,yBAIEA,EAASlB,MAJX,kEAOA,SAAeuB,EAAtB,+CAAO,OAAP,oBAAO,WAA0BZ,GAA1B,uFACkBM,EAAAA,EAAAA,IAAA,UAClBL,EADkB,iBACDD,EADC,4BACqBG,EADrB,oBADlB,cACCI,EADD,yBAIEA,EAASlB,MAJX,kEAOA,SAAeF,EAAtB,+CAAO,OAAP,oBAAO,WAA6Ba,GAA7B,uFACkBM,EAAAA,EAAAA,IAAA,UAClBL,EADkB,iBACDD,EADC,4BACqBG,EADrB,oBADlB,cACCI,EADD,yBAIEA,EAASlB,MAJX,kE","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/Services/GetApi.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  margin: 0 auto 0 0;\n  padding: 0 15px;\n`;\n\nexport const ListItem = styled.li``;\n\nexport const ReviewTitle = styled.h2`\n  font-size: 20px;\n`;\n\nexport const ReviewText = styled.p`\n  font-size: 16px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsAPI } from 'components/Services/GetApi';\nimport { List, ListItem, ReviewTitle, ReviewText } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  useEffect(() => {\n    getReviewsAPI(movieId)\n      .then(data => {\n        setReviews(data.results);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [movieId]);\n\n  return (\n    <List>\n      {reviews.length !== 0\n        ? reviews.map(review => (\n            <ListItem key={review.id}>\n              <ReviewTitle>Author: {review.author}</ReviewTitle>\n              <ReviewText>{review.content} </ReviewText>\n            </ListItem>\n          ))\n        : \"We don't have any reviews for this movie\"}\n    </List>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/w500';\nexport const GLOBAL_KEY = 'df88ba4f44a5ed712dd0a71f1b3d877c';\n\nexport async function getTrendingAPI(page = 1) {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${GLOBAL_KEY}&page=${page}`\n  );\n  return response.data;\n}\n\nexport async function getSearchMovieAPI(query, page = 1) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${GLOBAL_KEY}&language=en-US&page=${page}&include_adult=false&query=${query}`\n  );\n  return response.data;\n}\n\nexport async function getMovieIdAPI(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${GLOBAL_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getGenresAPI() {\n  const response = await axios.get(\n    `${BASE_URL}genre/movie/list?api_key=${GLOBAL_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getCastAPI(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${GLOBAL_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getReviewsAPI(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${GLOBAL_KEY}&language=en-US`\n  );\n  return response.data;\n}\n"],"names":["List","styled","ListItem","ReviewTitle","ReviewText","movieId","useParams","useState","reviews","setReviews","useEffect","getReviewsAPI","then","data","results","catch","error","console","log","length","map","review","author","content","id","BASE_URL","IMAGE_BASE_URL","GLOBAL_KEY","getTrendingAPI","page","axios","response","getSearchMovieAPI","query","getMovieIdAPI","getGenresAPI","getCastAPI"],"sourceRoot":""}