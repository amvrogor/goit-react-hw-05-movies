{"version":3,"file":"static/js/257.c3c3cc7e.chunk.js","mappings":"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","sources":["Services/getApi.jsx","pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/w500';\nexport const GLOBAL_KEY = 'df88ba4f44a5ed712dd0a71f1b3d877c';\n\nexport async function getTrendingAPI(page = 1) {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${GLOBAL_KEY}&page=${page}`\n  );\n  return response.data;\n}\n\nexport async function getSearchMovieAPI(query, page = 1) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${GLOBAL_KEY}&language=en-US&page=${page}&include_adult=false&query=${query}`\n  );\n  return response.data;\n}\n\nexport async function getMovieIdAPI(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${GLOBAL_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getGenresAPI() {\n  const response = await axios.get(\n    `${BASE_URL}genre/movie/list?api_key=${GLOBAL_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getCastAPI(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${GLOBAL_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getReviewsAPI(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${GLOBAL_KEY}&language=en-US`\n  );\n  return response.data;\n}\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const LinkButton = styled(Link)`\n  display: block;\n  padding: 5px;\n  margin-right: auto;\n  color: #3f3f3f;\n  text-decoration: none;\n  border: 1px solid gray;\n  border-radius: 5px;\n  :hover {\n    opacity: 0.7;\n  }\n`;\n\nexport const Movie = styled.div`\n  display: flex;\n  margin-top: 10px;\n  margin-right: auto;\n`;\n\nexport const Poster = styled.div`\n  width: 400px;\n`;\nexport const Image = styled.img`\n  display: block;\n  width: 400px;\n  height: auto;\n  object-fit: cover;\n`;\n\nexport const Info = styled.div`\n  padding: 0 15px;\n`;\n\nexport const MovieTitle = styled.h1`\n  font-size: 30px;\n`;\n\nexport const InfoTitle = styled.h2`\n  font-size: 20px;\n`;\n\nexport const InfoText = styled.p`\n  font-size: 16px;\n`;\n\nexport const AddInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-top: 10px;\n  padding: 0 15px 15px 15px;\n  border: 1px solid #3f3f3f;\n  border-width: 1px 0 1px 0;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 10px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ListItem = styled.li``;\n","import { useState, useEffect, Suspense, useRef } from 'react';\nimport { getMovieIdAPI } from 'Services/getApi';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { IMAGE_BASE_URL } from 'Services/getApi';\nimport {\n  Image,\n  Info,\n  InfoText,\n  InfoTitle,\n  List,\n  ListItem,\n  Movie,\n  MovieTitle,\n  Poster,\n  AddInfo,\n  LinkButton,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n  const [movie, setMovie] = useState({});\n\n  useEffect(() => {\n    getMovieIdAPI(movieId)\n      .then(data => {\n        setMovie(data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <LinkButton to={backLinkLocationRef.current}>Go back</LinkButton>\n      <Movie>\n        <Poster>\n          <Image\n            src={\n              movie.poster_path\n                ? `${IMAGE_BASE_URL}${movie.poster_path}`\n                : 'https://dummyimage.com/400x600/e0e0e0/ffffff.jpg&text=No+poster'\n            }\n            alt={movie.title}\n          />\n        </Poster>\n        <Info>\n          <MovieTitle>\n            {movie.title}{' '}\n            {movie.release_date ? `(${movie.release_date.slice(0, 4)})` : ''}\n          </MovieTitle>\n          <InfoText>User score: {movie.vote_average}</InfoText>\n          <InfoTitle>Overview</InfoTitle>\n          {movie.overview ? (\n            <InfoText>{movie.overview}</InfoText>\n          ) : (\n            \"We don't have the overview for this movie\"\n          )}\n          <InfoTitle>Genres</InfoTitle>\n          {movie.genres ? (\n            <InfoText>\n              {movie.genres.map(genre => genre.name).join(', ')}\n            </InfoText>\n          ) : (\n            \"We don't know genres of this movie\"\n          )}\n        </Info>\n      </Movie>\n      <AddInfo>\n        <InfoTitle>Additional information</InfoTitle>\n        <List>\n          <ListItem>\n            <LinkButton to=\"cast\">Cast</LinkButton>\n          </ListItem>\n          <ListItem>\n            <LinkButton to=\"reviews\">Reviews</LinkButton>\n          </ListItem>\n        </List>\n      </AddInfo>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\nexport default MovieDetails;\n\n// import { GetGenres } from 'components/Services/GetGenres';\n//   const [poster, setPoster] = useState('');\n//   const [title, setTitle] = useState('');\n//   const [release, setRelease] = useState('');\n//   const [voteAverage, setVoteAverage] = useState('');\n//   const [overview, setOverview] = useState('');\n//   const [genres, setGenres] = useState('');\n\n//   GetGenres();\n\n//   const savedGenres = JSON.parse(localStorage.getItem('savedGenres'));\n\n//   useEffect(() => {\n//     getMovieIdAPI(movieId)\n//       .then(data => {\n//         setPoster(\n//           data.poster_path\n//             ? `${IMAGE_BASE_URL}${data.poster_path}`\n//             : 'https://dummyimage.com/400x600/e0e0e0/ffffff.jpg&text=No+poster'\n//         );\n//         setTitle(data.title);\n//         setRelease(data.release_date);\n//         setVoteAverage(data.vote_average);\n//         setOverview(data.overview);\n//         setGenres(\n//           `${\n//             data.genres.length !== 0\n//               ? data.genres.map(genre => savedGenres[genre.id]).join(', ')\n//               : ''\n//           }`\n//         );\n//       })\n//       .catch(error => {\n//         console.log(error);\n//       });\n//   }, [movieId, savedGenres]);\n\n//   return (\n//     <>\n//       <LinkButton to={backLinkLocationRef.current}>Go back</LinkButton>\n//       <Movie>\n//         <Poster>\n//           <Image src={poster} alt={title} />\n//         </Poster>\n//         <Info>\n//           <MovieTitle>\n//             {title} {release ? `(${release.slice(0, 4)})` : ''}\n//           </MovieTitle>\n//           <InfoText>User score: {voteAverage}</InfoText>\n//           <InfoTitle>Overview</InfoTitle>\n//           {overview ? (\n//             <InfoText>{overview}</InfoText>\n//           ) : (\n//             \"We don't have the overview for this movie\"\n//           )}\n//           <InfoTitle>Genres</InfoTitle>\n//           {genres ? (\n//             <InfoText>{genres}</InfoText>\n//           ) : (\n//             \"We don't know genres of this movie\"\n//           )}\n//         </Info>\n//       </Movie>\n//       <AddInfo>\n//         <InfoTitle>Additional information</InfoTitle>\n//         <List>\n//           <ListItem>\n//             <LinkButton to=\"cast\">Cast</LinkButton>\n//           </ListItem>\n//           <ListItem>\n//             <LinkButton to=\"reviews\">Reviews</LinkButton>\n//           </ListItem>\n//         </List>\n//       </AddInfo>\n//       <Suspense fallback={<div>Loading...</div>}>\n//         <Outlet />\n//       </Suspense>\n//     </>\n//   );\n// };\n\n// export default MovieDetails;\n"],"names":["BASE_URL","IMAGE_BASE_URL","GLOBAL_KEY","getTrendingAPI","page","axios","response","data","getSearchMovieAPI","query","getMovieIdAPI","id","getCastAPI","getReviewsAPI","LinkButton","styled","Link","Movie","Poster","Image","Info","MovieTitle","InfoTitle","InfoText","AddInfo","List","ListItem","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useState","movie","setMovie","useEffect","then","catch","error","console","log","to","current","src","poster_path","alt","title","release_date","slice","vote_average","overview","genres","map","genre","name","join","Suspense","fallback"],"sourceRoot":""}